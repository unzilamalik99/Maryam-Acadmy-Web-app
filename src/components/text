  <!-- <!--  {/* <a href="/" title="Home" rel="home">
          <img src="edu.webp" alt="Home" className="w-124 h-42 " />
        </a>} -->


        <!-- <div className="cursor-point text-white text-2xl ">
            <AiOutlineClose />
          </div>
          <div className="cursor-point text-white text-2xl ">
            {" "}
            <AiOutlineMenu />{" "}
          </div> -->
<!-- 
          //https://www.codingdojo.com/blog/wp-content/uploads/tech-literacy-Copy.gif -->


          
<!-- <button id="multiLevelDropdownButton" data-dropdown-toggle="dropdown" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button">Dropdown button <svg class="w-2.5 h-2.5 ml-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
</svg></button>
 Dropdown menu -->
<!-- <div id="dropdown" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">
  <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="multiLevelDropdownButton">
    <li>
      <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Dashboard</a>
    </li>
    <li>
      <button id="doubleDropdownButton" data-dropdown-toggle="doubleDropdown" data-dropdown-placement="right-start" type="button" class="flex items-center justify-between w-full px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Dropdown<svg class="w-2.5 h-2.5 ml-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
</svg></button>
        <div id="doubleDropdown" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">
          <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="doubleDropdownButton">
            <li>
              <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Overview</a>
            </li>
            <li>
              <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">My downloads</a>
            </li>
            <li>
              <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Billing</a>
            </li>
            <li>
              <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Rewards</a>
            </li>
          </ul>
      </div>
    </li>
    <li>
      <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Earnings</a>
    </li>
    <li>
      <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Sign out</a>
    </li>
  </ul>
</div> -->

<!-- 
<div className="max-w-sm mx-auto bg-white rounded-xl shadow-md overflow-hidden">
  <div className="md:flex">
    <div className="md:flex-shrink-0">
      <img
        className="h-48 w-full object-cover md:w-48"
        src="your_image_url_here"
        alt="Card"
      />
    </div>
    <div className="p-8">
      <div className="uppercase tracking-wide text-sm text-indigo-500 font-semibold">
        Category
      </div>
      <a
        href="#"
        className="block mt-1 text-lg leading-tight font-medium text-black hover:underline"
      >
        Card Title
      </a>
      <p className="mt-2 text-white">
        In this training, you will learn about the various forms of gender-based violence, which constitutes a human rights violation and result from gender and other intersecting forms of discrimination. The course fee is $40, and you will receive a certificate of participation upon completion.  
      </p>
    </div>
  </div>
</div> -->


<!-- https://github.com/michalsnik/aos -->

<!-- 
<div
className={`container mx-auto flex justify-between items-center duration-300 ${
  open ? "block" : "hidden"
} md:block`}
>
<ul className={" space-x-4 text-white "}>
  {menuLinks?.map((menu, i) => (
    <li
      key={i}
      className="p-10 px-5 border border-gray-200 shadow-gray-400 py-5 w-200"
    >
      <a href={menu?.link}>{menu?.name}</a>
    </li>
  ))}
</ul>
</div>



<div className={`duration-300 ${open ? "right-0" : "right-[-100%]"} z-20 w-2/3 absolute md:hdden text-gray-900   font-medium bg-white top-25 max-w-xs h-screen `}>
  <ul className="h-full flex flex-col justify-center item-center  text-primary font-semibold text-xl">
    {menuLinks?.map((menu, i) => (
      <li key={i} className="p-10 px-5 border border-gray-200 shadow-gray-400 py-5 w-200">
        <a href={menu?.link} >{menu?.name}</a>
      </li>
    ))}
  </ul>
</div>

npm i react-scripts@latest

function Login() {
  let navigate = useNavigate();
  return (
    <div>
      <LoginForm
        onSubmit={() => {
          navigate('/user/dashboard');
        }}
      />
    </div>
  );
} -->


 <!-- import React, { useState } from "react";
 import Calendar from "react-calendar";
 import "react-calendar/dist/Calendar.css";
 // import "./App.css";
 
 const Events = () => {
   const [selectedDate, setSelectedDate] = useState(null);
   const [eventName, setEventName] = useState("");
   const [events, setEvents] = useState([]);
 
   const Date_Click_Fun = (date) => {
     setSelectedDate(date);
   };
 
   const Event_Data_Update = (event) => {
     setEventName(event.target.value);
   };
 
   const Create_Event_Fun = () => {
     if (selectedDate && eventName) {
       const newEvent = {
         id: new Date().getTime(),
         date: selectedDate,
         title: eventName,
       };
       setEvents([...events, newEvent]);
       setSelectedDate(null);
       setEventName("");
       setSelectedDate(newEvent.date);
     }
   };
 
   const Update_Event_Fun = (eventId, newName) => {
     const updated_Events = events.map((event) => {
       if (event.id === eventId) {
         return {
           ...event,
           title: newName,
         };
       }
       return event;
     });
     setEvents(updated_Events);
   };
 
   const Delete_Event_Fun = (eventId) => {
     const updated_Events = events.filter((event) => event.id !== eventId);
     setEvents(updated_Events);
   };
 
   return (
     <div className="app">
       <h1>Event handling </h1>
       <div className="container">
         <div className="calendar-container">
           <Calendar
             value={selectedDate}
             onClickDay={Date_Click_Fun}
             tileClassName={({ date }) =>
               selectedDate &&
               date.toDateString() === selectedDate.toDateString()
                 ? "selected"
                 : events.some(
                   (event) =>
                     event.date.toDateString() ===
                     date.toDateString(),
                 )
                 ? "event-marked"
                 : ""
             }
           />{" "}
         </div>
         <div className="event-container">
           {" "}
           {selectedDate && (
             <div className="event-form">
               <h2> Create Event </h2>{" "}
               <p>
                 {" "}
                 Selected Date: {selectedDate.toDateString()}{" "}
               </p>{" "}
               <input
                 type="text"
                 placeholder="Event Name"
                 value={eventName}
                 onChange={Event_Data_Update}
               />{" "}
               <button
                 className="create-btn"
                 onClick={Create_Event_Fun}
               >
                 Click Here to Add Event{" "}
               </button>{" "}
             </div>
           )}
           {events.length > 0 && selectedDate && (
             <div className="event-list">
               <h2> My Created Event List </h2>{" "}
               <div className="event-cards">
                 {" "}
                 {events.map((event) =>
                   event.date.toDateString() ===
                   selectedDate.toDateString() ? (
                     <div
                       key={event.id}
                       className="event-card"
                     >
                       <div className="event-card-header">
                         <span className="event-date">
                           {" "}
                           {event.date.toDateString()}{" "}
                         </span>{" "}
                         <div className="event-actions">
                           <button
                             className="update-btn"
                             onClick={() =>
                               Update_Event_Fun(
                                 event.id,
                                 prompt(
                                   "ENTER NEW TITLE",
                                 ),
                               )
                             }
                           >
                             Update Event{" "}
                           </button>{" "}
                           <button
                             className="delete-btn"
                             onClick={() =>
                               Delete_Event_Fun(
                                 event.id,
                               )
                             }
                           >
                             Delete Event{" "}
                           </button>{" "}
                         </div>{" "}
                       </div>{" "}
                       <div className="event-card-body">
                         <p className="event-title">
                           {" "}
                           {event.title}{" "}
                         </p>{" "}
                       </div>{" "}
                     </div>
                   ) : null,
                 )}{" "}
               </div>{" "}
             </div>
           )}{" "}
         </div>{" "}
       </div>{" "}
     </div>
   );
 };
 
 export default Events; -->